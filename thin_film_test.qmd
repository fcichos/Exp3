```python
import numpy as np
import matplotlib.pyplot as plt

# Constants
n1 = 1.0    # refractive index of air
n2 = 1.33   # refractive index of water
n3 = n1     # refractive index of bottom medium (air)

# Create arrays for thickness and wavelength
d_values = np.linspace(90e-9, 200e-9, 500)  # thickness from 50nm to 2µm
wavelengths = np.linspace(380e-9, 750e-9, 200)  # visible spectrum

def calculate_reflection(wavelength, d):
    k = 2 * np.pi / wavelength
    delta = 2 * n2 * d * k
    phi_12 = np.pi if n1 < n2 else 0
    phi_23 = np.pi if n2 < n3 else 0
    total_phase = delta + phi_12 + phi_23
    I = 4*np.cos(total_phase/2)**2
    return I

def find_interference_maxima(d, wavelengths, intensities):
    """Find wavelengths where interference maxima occur"""
    maxima_idx = []
    for i in range(1, len(wavelengths)-1):
        if (intensities[i] > intensities[i-1] and
            intensities[i] > intensities[i+1] and
            intensities[i] > 2.0):
            maxima_idx.append(i)
    return wavelengths[maxima_idx], intensities[maxima_idx]

def wavelength_to_rgb(wavelength):
    gamma = 0.8
    wavelength = wavelength * 1e9

    if wavelength < 380 or wavelength > 750:
        return (0, 0, 0)

    if wavelength < 440:
        R = (440 - wavelength) / (440 - 380)
        G = 0
        B = 1
    elif wavelength < 490:
        R = 0
        G = (wavelength - 440) / (490 - 440)
        B = 1
    elif wavelength < 510:
        R = 0
        G = 1
        B = (510 - wavelength) / (510 - 490)
    elif wavelength < 580:
        R = (wavelength - 510) / (580 - 510)
        G = 1
        B = 0
    elif wavelength < 645:
        R = 1
        G = (645 - wavelength) / (645 - 580)
        B = 0
    else:
        R = 1
        G = 0
        B = 0

    R = np.power(R, gamma) if R > 0 else 0
    G = np.power(G, gamma) if G > 0 else 0
    B = np.power(B, gamma) if B > 0 else 0

    return np.array([R, G, B])

def mix_colors(wavelengths, intensities):
    if len(wavelengths) == 0:
        return np.array([0, 0, 0, 0])  # Added alpha channel

    mixed_color = np.zeros(4)  # RGBA
    max_intensity = 0

    for wave, intensity in zip(wavelengths, intensities):
        color = wavelength_to_rgb(wave)
        mixed_color[:3] += color * (intensity/4.0)
        max_intensity = max(max_intensity, intensity)

    # Set alpha based on maximum intensity
    mixed_color[3] = max_intensity / 4.0  # normalize to maximum possible intensity

    if np.max(mixed_color[:3]) > 0:
        if len(wavelengths) > 3:
            white_factor = min((len(wavelengths) - 3) / 5, 0.7)
            mixed_color[:3] = mixed_color[:3] * (1 - white_factor) + white_factor
        else:
            mixed_color[:3] = mixed_color[:3] / np.max(mixed_color[:3])

    return mixed_color

# Calculate colors for each thickness
rgba_image = np.zeros((len(d_values), 4))  # RGBA
for i, d in enumerate(d_values):
    intensities = np.array([calculate_reflection(w, d) for w in wavelengths])
    max_wavelengths, max_intensities = find_interference_maxima(d, wavelengths, intensities)
    rgba_image[i] = mix_colors(max_wavelengths, max_intensities)

# Create a checkerboard background
bg_size = 10
bg = np.zeros((len(d_values), 1, 3))
bg[::bg_size] = 0.8  # lighter squares
bg[bg_size//2::bg_size] = 0.2  # darker squares

# Plot with background
plt.figure(figsize=(2, 6))
plt.imshow(bg, aspect='auto', origin='lower')  # background
plt.imshow(rgba_image.reshape(-1, 1, 4), aspect='auto', origin='lower')  # colored film
plt.ylabel('Thickness (nm)')
tick_positions = np.linspace(0, len(d_values)-1, 6)
tick_labels = [f'{d*1e9:.0f}' for d in np.linspace(d_values[0], d_values[-1], 6)]
plt.yticks(tick_positions, tick_labels)
plt.xticks([])
plt.title('Reflected Colors')
plt.show()

# Print theoretical wavelengths for verification
test_thicknesses = [100e-9, 200e-9, 300e-9]
print("\nExpected wavelengths of constructive interference:")
for d in test_thicknesses:
    print(f"\nThickness {d*1e9:.0f} nm:")
    for m in range(1, 4):
        wavelength = 4 * n2 * d / (2*m - 1)
        if 380e-9 <= wavelength <= 750e-9:
            print(f"m={m}: {wavelength*1e9:.0f} nm")
```


```python
import numpy as np
import matplotlib.pyplot as plt

# Constants
n1 = 1.0    # refractive index of air
n2 = 1.33   # refractive index of water
n3 = n1     # refractive index of bottom medium (air)

def calculate_reflection(wavelength, d):
    k = 2 * np.pi / wavelength
    delta = 2 * n2 * d * k
    phi_12 = np.pi if n1 < n2 else 0
    phi_23 = np.pi if n2 < n3 else 0
    total_phase = delta + phi_12 + phi_23
    I = 4*np.cos(total_phase/2)**2
    return I

# Calculate reflection for a range of thicknesses
d_values = np.linspace(0, 500e-9, 1000)  # 0 to 500 nm
wavelength = 520e-9  # green light

intensities = [calculate_reflection(wavelength, d) for d in d_values]

# Calculate theoretical destructive interference positions
def destructive_thickness(m, wavelength):
    return (2*m - 1) * wavelength/(4*n2)

# Plot reflection intensity vs thickness
plt.figure(figsize=(10, 6))
plt.plot(d_values*1e9, intensities)
plt.xlabel('Thickness (nm)')
plt.ylabel('Reflection Intensity')
plt.title('Reflection Intensity vs Film Thickness')

# Mark destructive interference positions
for m in range(1, 4):
    d = destructive_thickness(m, wavelength)
    plt.axvline(x=d*1e9, color='r', linestyle='--', alpha=0.5)
    plt.text(d*1e9, 0.5, f'm={m}', rotation=90)

plt.grid(True)
plt.show()

# Print destructive interference thicknesses
print("\nDestructive interference thicknesses:")
for m in range(1, 4):
    d = destructive_thickness(m, wavelength)
    print(f"m={m}: {d*1e9:.1f} nm")
```


```python
import numpy as np
import matplotlib.pyplot as plt

# Constants
n1 = 1.0    # refractive index of air
n2 = 1.33   # refractive index of water
n3 = n1     # refractive index of bottom medium (air)

def calculate_reflection(wavelength, d):
    k = 2 * np.pi / wavelength
    delta = 2 * n2 * d * k  # path difference phase
    phi_12 = np.pi if n1 < n2 else 0  # first interface phase shift
    phi_23 = 0  # second interface phase shift
    total_phase = delta + phi_12 + phi_23
    I = 4*np.cos(total_phase/2)**2
    return I

# Calculate reflection for very thin films
d_values = np.linspace(0, 200e-9, 1000)  # 0 to 200 nm
wavelength = 550e-9  # green light

intensities = [calculate_reflection(wavelength, d) for d in d_values]

plt.figure(figsize=(10, 6))
plt.plot(d_values*1e9, intensities)
plt.xlabel('Thickness (nm)')
plt.ylabel('Reflection Intensity')
plt.title('Reflection Intensity vs Film Thickness')

# Highlight the Newton black film region
plt.axvspan(0, 20, color='gray', alpha=0.3, label='Newton black film region')

plt.grid(True)
plt.legend()
plt.show()

# Print phase contributions for very thin film
d_thin = 10e-9  # 10 nm
path_phase = 4 * np.pi * n2 * d_thin / wavelength
print(f"\nFor d = {d_thin*1e9:.1f} nm:")
print(f"Path difference phase: {path_phase:.3f} radians")
print(f"Interface phase shift: π radians")
print(f"Total phase: {path_phase + np.pi:.3f} radians")
```
