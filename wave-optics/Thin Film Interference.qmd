---
title: Thin Film Interference
jupyter: python3
format:
  html:
    code-fold: true
crossref:
  fig-title: Figure     # (default is "Figure")
  title-delim: "—"   # (default is ":")
  fig-prefix: "Figure"
  eq-prefix: Eq.
  chapters: true
---


```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

from time import sleep,time
from ipycanvas import MultiCanvas, hold_canvas,Canvas
import matplotlib as mpl
import matplotlib.cm as cm
from matplotlib.patches import Arc
from matplotlib.transforms import Bbox, IdentityTransform, TransformedBbox


class AngleAnnotation(Arc):
    """
    Draws an arc between two vectors which appears circular in display space.
    """
    def __init__(self, xy, p1, p2, size=75, unit="points", ax=None,
                 text="", textposition="inside", text_kw=None, **kwargs):
        """
        Parameters
        ----------
        xy, p1, p2 : tuple or array of two floats
            Center position and two points. Angle annotation is drawn between
            the two vectors connecting *p1* and *p2* with *xy*, respectively.
            Units are data coordinates.

        size : float
            Diameter of the angle annotation in units specified by *unit*.

        unit : str
            One of the following strings to specify the unit of *size*:

            * "pixels": pixels
            * "points": points, use points instead of pixels to not have a
              dependence on the DPI
            * "axes width", "axes height": relative units of Axes width, height
            * "axes min", "axes max": minimum or maximum of relative Axes
              width, height

        ax : `matplotlib.axes.Axes`
            The Axes to add the angle annotation to.

        text : str
            The text to mark the angle with.

        textposition : {"inside", "outside", "edge"}
            Whether to show the text in- or outside the arc. "edge" can be used
            for custom positions anchored at the arc's edge.

        text_kw : dict
            Dictionary of arguments passed to the Annotation.

        **kwargs
            Further parameters are passed to `matplotlib.patches.Arc`. Use this
            to specify, color, linewidth etc. of the arc.

        """
        self.ax = ax or plt.gca()
        self._xydata = xy  # in data coordinates
        self.vec1 = p1
        self.vec2 = p2
        self.size = size
        self.unit = unit
        self.textposition = textposition

        super().__init__(self._xydata, size, size, angle=0.0,
                         theta1=self.theta1, theta2=self.theta2, **kwargs)

        self.set_transform(IdentityTransform())
        self.ax.add_patch(self)

        self.kw = dict(ha="center", va="center",
                       xycoords=IdentityTransform(),
                       xytext=(0, 0), textcoords="offset points",
                       annotation_clip=True)
        self.kw.update(text_kw or {})
        self.text = ax.annotate(text, xy=self._center, **self.kw)

    def get_size(self):
        factor = 1.
        if self.unit == "points":
            factor = self.ax.figure.dpi / 72.
        elif self.unit[:4] == "axes":
            b = TransformedBbox(Bbox.unit(), self.ax.transAxes)
            dic = {"max": max(b.width, b.height),
                   "min": min(b.width, b.height),
                   "width": b.width, "height": b.height}
            factor = dic[self.unit[5:]]
        return self.size * factor

    def set_size(self, size):
        self.size = size

    def get_center_in_pixels(self):
        """return center in pixels"""
        return self.ax.transData.transform(self._xydata)

    def set_center(self, xy):
        """set center in data coordinates"""
        self._xydata = xy

    def get_theta(self, vec):
        vec_in_pixels = self.ax.transData.transform(vec) - self._center
        return np.rad2deg(np.arctan2(vec_in_pixels[1], vec_in_pixels[0]))

    def get_theta1(self):
        return self.get_theta(self.vec1)

    def get_theta2(self):
        return self.get_theta(self.vec2)

    def set_theta(self, angle):
        pass

    # Redefine attributes of the Arc to always give values in pixel space
    _center = property(get_center_in_pixels, set_center)
    theta1 = property(get_theta1, set_theta)
    theta2 = property(get_theta2, set_theta)
    width = property(get_size, set_size)
    height = property(get_size, set_size)

    # The following two methods are needed to update the text position.
    def draw(self, renderer):
        self.update_text()
        super().draw(renderer)

    def update_text(self):
        c = self._center
        s = self.get_size()
        angle_span = (self.theta2 - self.theta1) % 360
        angle = np.deg2rad(self.theta1 + angle_span / 2)
        r = s / 2
        if self.textposition == "inside":
            r = s / np.interp(angle_span, [60, 90, 135, 180],
                                          [3.3, 3.5, 3.8, 4])
        self.text.xy = c + r * np.array([np.cos(angle), np.sin(angle)])
        if self.textposition == "outside":
            def R90(a, r, w, h):
                if a < np.arctan(h/2/(r+w/2)):
                    return np.sqrt((r+w/2)**2 + (np.tan(a)*(r+w/2))**2)
                else:
                    c = np.sqrt((w/2)**2+(h/2)**2)
                    T = np.arcsin(c * np.cos(np.pi/2 - a + np.arcsin(h/2/c))/r)
                    xy = r * np.array([np.cos(a + T), np.sin(a + T)])
                    xy += np.array([w/2, h/2])
                    return np.sqrt(np.sum(xy**2))

            def R(a, r, w, h):
                aa = (a % (np.pi/4))*((a % (np.pi/2)) <= np.pi/4) + \
                     (np.pi/4 - (a % (np.pi/4)))*((a % (np.pi/2)) >= np.pi/4)
                return R90(aa, r, *[w, h][::int(np.sign(np.cos(2*a)))])

            bbox = self.text.get_window_extent()
            X = R(angle, r, bbox.width, bbox.height)
            trans = self.ax.figure.dpi_scale_trans.inverted()
            offs = trans.transform(((X-s/2), 0))[0] * 72
            self.text.set_position([offs*np.cos(angle), offs*np.sin(angle)])

plt.rcParams.update({'font.size': 10,
                     'lines.linewidth': 1,
                     'lines.markersize': 5,
                     'axes.labelsize': 10,
                     'axes.labelpad':0,
                     'xtick.labelsize' : 9,
                     'ytick.labelsize' : 9,
                     'legend.fontsize' : 8,
                     'contour.linewidth' : 1,
                     'xtick.top' : True,
                     'xtick.direction' : 'in',
                     'ytick.right' : True,
                     'ytick.direction' : 'in',
                     'figure.figsize': (4, 3),
                     'axes.titlesize':8})

def get_size(w,h):
    return((w/2.54,h/2.54))

```



The reflection and transmission of waves on a thin film can also be regarded as an interference of two waves. A light wave is incident on a thin film as depicted below. A part of the wave is reflected on the first boundary (1). Another part is transmitted through the first boundary and reflected at the second boundary to be transmitted in the same direction (2) as the first reflected part. Note that the lines and arrows denote the direction of the wavevector $\vec{k}$ of the partial waves.

![Interference on a thin film considering two partial waves.](img/thin_film.png){width=50% fig-align="center"}

This picture of a single reflection at each interface is a simplification. In reality, we would have multiple reflections occurring at both interfaces, leading to an infinite number of partial waves. However, for interfaces with weak reflection coefficients (like the air/glass interface where r ≈ 4%), the contribution of higher-order reflections becomes negligible. After two reflections, the amplitude is already reduced to 4% of 4% = 0.16% of the incident wave. Therefore, considering just the first two partial waves provides a good approximation for weak reflections.

For the geometry shown in the figure above, we consider a medium with refractive index $n_1$ surrounding a film with $n_2$. The path difference Δs between waves 1 and 2 consists of two contributions:

$$
\Delta s=\frac{2n_2d}{\cos(\beta)}-2d\tan(\beta)\sin(\alpha)
$$

The first term represents the optical path inside the film (wave 2), while the second term accounts for the additional path of wave 1 after reflection (shown by the dotted line).

Using Snell's law, $n_1\sin(\alpha) = n_2\sin(\beta)$, and setting $n_1 = 1$ and $n_2 = n$, we can simplify the path difference:

$$
\Delta s =\frac{2nd}{\cos(\beta)}-\frac{2nd\sin^2(\beta)}{\cos(\beta)}=2n d \cos(\beta)=2d\sqrt{n^2-\sin^2(\alpha)}
$$

The total phase difference Δφ between the waves includes both the path difference and interface effects:

$$
\Delta \phi=\frac{2\pi}{\lambda}\Delta s +\pi
$$

The additional π term arises from the reflection at the first interface where $n_1 < n_2$. This phase jump occurs whenever light reflects from an optically denser medium. No such phase jump occurs at the second interface where $n_2 > n_1$.


::: {.callout-note}
## Phase Jump at Boundaries

Wave may experience phase jumps when being reflected.

A light wave will experience a phase jump of $\pi$ when being reflected by a medium of higher refractive index.

A light wave will experience no phase jump when being reflected by a medium of lower refractive index.

The physical reasons will be covered when we deal with the Fresnel formulas in electromagnetic optics.
:::


To get to know the properties of thin film interference a bit better we consider the normal incidence $\alpha=0$, which leaves us with

$$
\Delta \phi=\frac{2\pi}{\lambda}2dn+\pi
$$

In case we are searching for constructive interference, this phase shift should correspond to an integer multiple of $2\pi$, e.g. $\Delta \phi =m2\pi$. From the last equation we see already, that for $d=0$, we have in principle a residual phase shift of $\pi$, meaning that there is only destructive interference. Yet a film thickness of zero does not really make sense.

We would like to discuss two different situations in the following in an example. For that we either look at the thickness under which a constructive interference at a wavelength of $\lambda$ occurs, or we ask what kind of wavelength do show constructive interference for a fixed thickness.

### Fixed Wavelength

For a fixed wavelength of $\lambda$ we obtain a corresponding thickness for the constructive interference of

$$
d=\frac{(2m-1)\lambda}{4n}
$$

Thus we see constructive interference at from regions of the same thickness $d$. This means that the interference fringes correspond to iso-thickness lines that we can use to determine the thickness of the film.

### Fixed Thickness

If we use now a film of a fixed thickness of $d$ and send in a mixture of different wavelength, we obtain constructive interference for the wavelengths

$$
\lambda_{max}=\frac{4nd}{2m-1}
$$

This means, thin films appear colored under some circumstances, which we still have to define. For this, we can now have a look at some examples.

#### Example - d=100 nm and below

If we look at a film thickness of $d=100$ nm with $n=1.33$, which corresponds to water we obbtain constructive interference for

$$
\lambda_{max}=\frac{4\cdot 100\, {\rm nm} \cdot 1.33}{2m-1}
$$

or

$$
\lambda_{max}=\frac{ 532 {\rm nm}}{2m-1}
$$

which yields for different values of $m$

- $m=1$: 532 nm
- $m=2$: 177 nm
- $m=3$: 106 nm


and so on. We see therefore that the longest wavelength to create constructive interference is $532$ nm, which is green light. There is no longer wavelength causing constructive interefernece. The next longest wavelength is 177 nm, which is not visible anymore, so the reflection of a $d=100$ nm film would look green. The left plot in the figure below shows the intensity distribution over wavelength where you recognize that the maximum is very broad. If your therefore see green light being reflected from a thin sopa film, you can be sure that the film is about 100 nm thick!


```{python}
# | code-fold: true
# | fig-align: center
# | label: fig-reflection
# | fig-cap: Intensity of reflection for a 100 nm and a 10 nm film of water.
# Constants
n1 = 1.0    # refractive index of air
n2 = 1.33   # refractive index of water
n3 = n1     # refractive index of bottom medium (air)

def calculate_reflection(wavelength, d):
    k = 2 * np.pi / wavelength

    delta = 2 * n2 * d * k

    # Phase shift at interfaces (π if n1 < n2, 0 if n1 > n2)
    phi_12 = np.pi if n1 < n2 else 0
    phi_23 = np.pi if n2 < n3 else 0

    total_phase = delta + phi_12 + phi_23

    I = 4*np.cos(total_phase/2)**2

    return I

wavelengths = np.linspace(400, 750, 1000)

R_100nm = [calculate_reflection(w*1e-9, 100e-9) for w in wavelengths]
R_10nm = [calculate_reflection(w*1e-9, 10e-9) for w in wavelengths]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=get_size(10, 5),dpi=150)

ax1.plot(wavelengths, R_100nm, 'b-')
ax1.set_title('100 nm water film')
ax1.set_xlabel('wavelength [nm]')
ax1.set_ylabel('intensity ')
ax1.set_ylim(0, 4)

ax2.plot(wavelengths, R_10nm, 'r-')
ax2.set_title('10 nm water film')
ax2.set_xlabel('wavelength [nm]')
ax2.set_ylabel('intensity')
ax2.set_ylim(0, 4)

plt.tight_layout()
plt.show()
```


An interesting effect is appearing, when the thickness of the water film get very thin. We may ask, when is no constructive interference in the visible range observed. We therefore set the wavelength of the constructive interefence to $\lambda_{max}=400\, {\rm nm}$ and calculate the film thickness for which this occurs.

$$
d=\frac{(2m-1)\lambda_{max}}{2n}\approx 75\, {\rm nm}
$$

So for film thickness of water thinner than 75 nm, there is no constructive interference of the reflected light from the two boundaries in the visible region anymore. There will be still a reflection but no specific color. If the film gets even thinner, the intensity of the reflected light is further diminished by desctructive interference and whe obtain no reflection as shown on the right side of the above figure for a $d=10$ nm film. Such thin films, which do not show any reflection are called **Newton black films**. You might have seen them, if you look closer at soap bubbles. They will show regions, which look like holes, but of course there are no holes in soap bubbles.


#### Example - d=1 µm and d=100 µm

If the film gets thicker, e.g. $d=1$ µm or even $d=100$ µm, more than one constructive interference fits into the visible wavelength range. Due to that, the film may appear to have mixed colors or even look white. Below are the diagrams for those film thicknesses.

```{python}
# | fig-align: center
# | code-fold: true
# | label: fig-reflection2
# | fig-cap: Reflection from a 1µm (left) and a 100 µm (right)thin water film. Experimental demonstration of the reflection of white light by a thin soap film.
# Constants
n1 = 1.0    # refractive index of air
n2 = 1.33   # refractive index of water
n3 = n1     # refractive index of bottom medium (air)

def calculate_reflection(wavelength, d):
    k = 2 * np.pi / wavelength

    delta = 2 * n2 * d * k

    # Phase shift at interfaces (π if n1 < n2, 0 if n1 > n2)
    phi_12 = np.pi if n1 < n2 else 0
    phi_23 = np.pi if n2 < n3 else 0

    total_phase = delta + phi_12 + phi_23

    I = 4*np.cos(total_phase/2)**2

    return I

wavelengths = np.linspace(400, 750, 10000)

R_1mum = [calculate_reflection(w*1e-9, 1e-6) for w in wavelengths]
R_100mum = [calculate_reflection(w*1e-9, 100e-6) for w in wavelengths]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=get_size(10, 5),dpi=150)

ax1.plot(wavelengths, R_1mum, 'b-')
ax1.set_title('1 µm water film')
ax1.set_xlabel('wavelength [nm]')
ax1.set_ylabel('intensity ')
ax1.set_ylim(0, 4)

ax2.plot(wavelengths, R_100mum, 'r-',lw=0.1)
ax2.set_title('100 µm water film')
ax2.set_xlabel('wavelength [nm]')
ax2.set_ylabel('intensity')
ax2.set_ylim(0, 4)

plt.tight_layout()
plt.show()
```




::: {.callout-note collapse=true}
## Haidinger fringes
This type of interference fringes observed on a plane-parallel film are called **Haidinger fringes**.
Haidinger fringes are circular interference patterns observed when collimated light passes through a transparent plate at near-normal incidence. Named after Wilhelm von Haidinger who first described them in 1849, these fringes are localized at infinity (or in the focal plane of a lens) and arise from multiple reflections between the parallel surfaces of the plate. Unlike Newton's rings, which are localized near the surfaces that create them and require curved surfaces, Haidinger fringes occur with parallel surfaces and depend on the plate's thickness, its refractive index, the angle of incidence, and the wavelength of light.


![Haidinger Fringes (c) Eugene Hecht, Optics](img/haidinger.jpg)
:::


The most beautiful example of thin film interference are of course soap bubbles or soap films. The colors of soap bubbles are due to the interference of light waves reflecting off the front and back surfaces of the thin soap film. The colors are due to the fact that the thickness of the film is not uniform. The film is thinnest at the top and thickest at the bottom. The colors are due to the interference of light waves reflecting off the front and back surfaces of the thin soap film.

::: {#fig-soapfilm layout-ncol=2}
![](img/soap_film_lecture.png){width="45%"}

![](img/soap_film_lecture1.png){width="45%"}

Experimental demonstration of the reflection of white light by a thin soap film.
:::




## Newton Rings

A similar interference pattern is also observed in the case of a hemi-spherical surface touching a planar surface as sketched in the image below.

![Newton Rings. Interference of waves from a spherical and a planar surface in close contact.](img/newton_ring_sketch.png){width=80% fig-align="center"}

If light is incident normal to the top surface, reflections occur at several interfaces. The important reflections occur at the spherical surface and the planar surface below. The vertical distance between these surfaces is $d$, though refraction will deflect the beam slightly, making the actual path longer. If we stay close to the axis of the spherical surface ($r\ll R$), where $R$ is the radius of the spherical surface, we can neglect this refraction effect.

Under these conditions, the path length difference between a wave reflected at the curved and the planar surface is

$$
\Delta s=2d+\frac{\lambda}{2}
$$

The additional term $\lambda/2$ arises from the phase jump when reflecting at the planar boundary, as this reflection occurs at an optically denser material.

Having the path length difference, we can now calculate the condition for destructive interference:

$$
\Delta s=\frac{2m+1}{2}\lambda=2d+\frac{\lambda}{2}
$$

where $m$ is an integer. The distance $d$ can be expressed as a function of the radial distance $r$ from the contact point between the spherical surface and the plane surface. From the geometry of a circle, we have:

$$
r^2=d(2R-d)
$$

with $R$ being the radius of the spherical surface. Since $d\ll R$, the term $d^2$ becomes negligible compared to $2Rd$, allowing us to simplify to:

$$
r^2=2dR
$$

from which we obtain:

$$
d=\frac{r^2}{2R}
$$

Inserting this distance into the interference condition yields the radius $r_m$ where destructive interference is observed:

$$
r_m=\sqrt{m\lambda R}
$$

This equation shows that the radius of the interference rings increases with the square root of the integer $m$. Each wavelength creates its own ring pattern, with the radius depending on both the wavelength and the sphere's radius. This relationship makes Newton rings a useful tool for measuring either the wavelength of light (if $R$ is known) or the radius of curvature of the spherical surface (if $\lambda$ is known).

![Observation of Newton Rings using white light in the lecture.](img/newton_rings_lecture.png){width=80% fig-align="center"}

When using white light, as shown above, each wavelength creates its own set of rings, leading to the colored pattern observed. The spacing and size of these rings provide a precise method for optical measurements and quality control of optical surfaces.
